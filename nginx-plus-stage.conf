load_module modules/ndk_http_module.so;
load_module modules/ngx_stream_lua_module.so;

user  nginx;
worker_processes 2;
worker_cpu_affinity 01 10;

error_log  /dev/stdout  info;


events {
    worker_connections  150000;
}
stream{
    server {
        listen       1883;  #监听端口 也可以使用1883

set    $clientid '';
    set    $username '';
    set    $password '';
    set    $upip '';
    resolver coredns.kube-system:53;
        preread_by_lua_block {
          local tcpsock = ngx.req.socket(true)
local remainByteNum = 0
local remainLength = 0
local multiplier = 1
local len
local data
local bit = require "bit"
local packetType = string.byte(tcpsock:peek(1),1)
if(packetType>=16 and packetType<32) then
    for i = 1, 5, 1 do
        remainByteNum = remainByteNum +1;
        data = tcpsock:peek(i+1)
        len = string.byte(data,-1)
        ngx.log(ngx.INFO,"byte:",len)
        remainLength = remainLength + bit.band(len, 127) * multiplier
        multiplier = multiplier * 128
        if bit.band(len, 128) < 128 then
            break;
        end
    end

    data = tcpsock:peek(1+remainLength+remainByteNum)
    local fixandvarhead = 1+remainByteNum+10
    local highclientId = string.byte(data,fixandvarhead+1)
    local lowclientId = string.byte(data,fixandvarhead+2)
    local clientidlength = highclientId * 256 + lowclientId
    ngx.var.clientid = string.sub(data,fixandvarhead+2+1,fixandvarhead+2+clientidlength)
    local highuser = string.byte(data,fixandvarhead+2+clientidlength+1)
    local lowuser = string.byte(data,fixandvarhead+2+clientidlength+2)
    local userlength = highuser * 256 + lowuser
    ngx.var.username = string.sub(data,fixandvarhead+2+clientidlength+2+1,fixandvarhead+2+clientidlength+2+userlength)
    local highpwd = string.byte(data,fixandvarhead+2+clientidlength+2+userlength+1)
    local lowpwd = string.byte(data,fixandvarhead+2+clientidlength+2+userlength+2)
    local pwdlength = highpwd * 256 + lowpwd
    ngx.var.password = string.sub(data,fixandvarhead+2+clientidlength+2+userlength+2+1,fixandvarhead+2+clientidlength+2+userlength+2+pwdlength)
    local withwilllen = fixandvarhead+2+clientidlength+2+userlength+2+pwdlength
    local flag = string.byte(data,1+remainByteNum+8)
    ngx.log(ngx.INFO,"flag is:",flag)
    local willflag = bit.band(flag,4)
    ngx.log(ngx.INFO,"willflag is:",willflag)
    if willflag > 0 then
        highuser = string.byte(data,withwilllen+1)
        lowuser = string.byte(data,withwilllen+2)
        userlength = highuser * 256 + lowuser
        ngx.var.username = string.sub(data,withwilllen+2+1,withwilllen+2+userlength)
        ngx.log(ngx.INFO,"with will username is:",username)
        highpwd = string.byte(data,withwilllen+2+userlength+1)
        lowpwd = string.byte(data,withwilllen+2+userlength+2)
        pwdlength = highpwd * 256 + lowpwd
        ngx.var.password = string.sub(data,withwilllen+2+userlength+2+1,withwilllen+2+userlength+2+pwdlength)
    end
        ngx.log(ngx.INFO,"with will clientidlength:",clientidlength,",clientid:",ngx.var.clientid,",userlength:",userlength,",username:",ngx.var.username,",pwdlength:",pwdlength,",pwd:",ngx.var.password)


    local redis = require("resty.redis")
    local red = redis:new()
    red:set_timeout(3000)
    local ok, err = red:connect("redis-openresty-redis.emqx-with-ngplus.svc.cluster.local",6379)
    ngx.log(ngx.INFO, "redis connect:", ok, " ", err)
    if ok then
        local devkey = ngx.var.password.."-"..ngx.var.username
        local nodeip = red:get(devkey)
        local emqxsname = red:get(ngx.var.password)
        if emqxsname == nil or emqxsname == ngx.null then
            emqxsname = red:get("default")
        end
        local emqxnodes = red:lrange(emqxsname,0,-1)
        if emqxnodes == nil or emqxnodes == ngx.null or #emqxnodes == 0 then
            ngx.log(ngx.ERR, "no avaiable emqxnodes,device key:",devkey)
            nodeip = red:get("noauth")
        else
            if nodeip == ngx.null then
                local oridx = 0
                for i = 1, #ngx.var.username,1 do
                    oridx = oridx + string.byte(ngx.var.username,i)
                end
                local idx = oridx % #emqxnodes + 1
                nodeip = emqxnodes[idx]
                red:set(devkey,nodeip)
            else
                local iscontain = 0
                for i = 1,#emqxnodes+1,1 do
                    if emqxnodes[i] == nodeip then
                        iscontain = 1
                        break
                    end
                end
                if iscontain == 0 then
                    red:del(devkey)
                    local oridx = 0
                    for i = 1, #ngx.var.username,1 do
                        oridx = oridx + string.byte(ngx.var.username,i)
                    end
                    local idx = oridx % #emqxnodes + 1
                    nodeip = emqxnodes[idx]
                    red:set(devkey,nodeip)
                end
            end 
        end
        ngx.var.upip = nodeip..":1883"
    end
end
       }

        mqtt             on;
        mqtt_set_connect clientid $username;
        mqtt_set_connect username $clientid;
        proxy_connect_timeout 960s;
        proxy_timeout 960s;
        proxy_pass $upip;
        proxy_buffer_size 4k;
        tcp_nodelay on;
    }
}